var vertexColorShaderSource=`#version 300 es
	in vec3 aVertexPosition; 
	in vec3 aVertexNormal;
	
	uniform mat4 uMVMatrix;
	uniform mat4 uPMatrix;
	uniform mat3 uNMatrix;
	uniform mat4 uObjectToWorld;
	
	const int NUM_CASCADES =  3;
	
	uniform mat4 uMVPlight[NUM_CASCADES];
	
//	uniform mat4 uLightMViewMatrix;
//	uniform mat4 uLightProjectionMatrix;
	
	out vec3 vNormal;
	out vec3 vWorldPos;
	
	out vec4 vShadowPos;
	
	out vec4 vLightSpacePos[NUM_CASCADES];
	out float vClipSpacePosZ;
	
	const mat4 texUnitConverter = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 
		0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);
	
	void main(void) {
	    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
	    vWorldPos = (uObjectToWorld * vec4(aVertexPosition, 1.0)).xyz;
	    
        vNormal = uNMatrix * aVertexNormal;
        
        for(int i = 0; i < NUM_CASCADES; i++) {
        	vLightSpacePos[i] = texUnitConverter * 
				uMVPlight[i] * vec4(aVertexPosition, 1.0);
        }
        vClipSpacePosZ = gl_Position.z;
        
//        vShadowPos = texUnitConverter * uLightProjectionMatrix *
//        uLightMViewMatrix * vec4(aVertexPosition, 1.0);
	}`;var fragmentColorShaderSource=`#version 300 es
	precision mediump float;
	out vec4 fragmentColor;

	uniform vec3 uWorldSpaceCameraPos;

	uniform vec3 uAmbientColor;
	
	uniform vec3 uLightingDirection;
	uniform vec3 uDirectionalColor;
    in vec3 vNormal;
    
    in vec3 vWorldPos;

	in vec4 vShadowPos;

	uniform vec3 uColor;
	
	uniform float uMetallic;
	uniform float uSmoothness;
	
	const int NUM_CASCADES = 3;
	in vec4 vLightSpacePos[NUM_CASCADES];
	in float vClipSpacePosZ;
	
	uniform sampler2D uShadowMap[NUM_CASCADES];
	uniform float uCascadeEndClipSpace[NUM_CASCADES];

	vec2 poissonDisk[16] = vec2[]( 
		vec2( -0.94201624, -0.39906216 ), 
		vec2( 0.94558609, -0.76890725 ), 
		vec2( -0.094184101, -0.92938870 ), 
		vec2( 0.34495938, 0.29387760 ), 
		vec2( -0.91588581, 0.45771432 ), 
		vec2( -0.81544232, -0.87912464 ), 
		vec2( -0.38277543, 0.27676845 ), 
		vec2( 0.97484398, 0.75648379 ), 
		vec2( 0.44323325, -0.97511554 ), 
		vec2( 0.53742981, -0.47373420 ), 
		vec2( -0.26496911, -0.41893023 ), 
		vec2( 0.79197514, 0.19090188 ), 
		vec2( -0.24188840, 0.99706507 ), 
		vec2( -0.81409955, 0.91437590 ), 
		vec2( 0.19984126, 0.78641367 ), 
		vec2( 0.14383161, -0.14100790 ) 
	);	

	float decodeFloat (vec4 color) {
	  const vec4 bitShift = vec4(
	    1.0 / (256.0 * 256.0 * 256.0),
	    1.0 / (256.0 * 256.0),
	    1.0 / 256.0,
	    1
	  );
	  return dot(color, bitShift);
	}

	float random(vec4 seed) {
		float dot_product = dot(seed, vec4(12.9898, 78.233, 45.164, 94.673));
		return fract(sin(dot_product) * 43758.5453);
	}

	float CalcShadowFactor(int CascadeIndex, vec4 LightSpacePos) {
		vec3 fragmentDepth = LightSpacePos.xyz / LightSpacePos.w;
		vec3 normal = normalize(vNormal);
		
		float cosLight = clamp(dot(-uLightingDirection, normal), 0.0, 1.0);
		
		float shadowAcneRemover = 0.005 * tan(acos(cosLight));
    	shadowAcneRemover = clamp(shadowAcneRemover, 0.0, 0.007);
    	fragmentDepth.z -= shadowAcneRemover;
    	
    	float amountInLight = 0.0;
    
		for (int i = 0; i < 4; i++){
			int index = int(16.0 * random(vec4(fragmentDepth.xyy, i))) % 16;
			float texelDepth = decodeFloat(texture(uShadowMap[CascadeIndex],
				fragmentDepth.xy + poissonDisk[index]/1400.0));
			if (fragmentDepth.z < texelDepth) {
				amountInLight += 0.25;
			}
		}
		
		return amountInLight;
	}

    void main(void) {
    	vec3 normal = normalize(vNormal);
    
    	//shadow    
    	float amountInLight = 0.0;
		for (int i = 0; i < NUM_CASCADES ; i++){
			if (vClipSpacePosZ <= uCascadeEndClipSpace[i]) {
				amountInLight = CalcShadowFactor(i, vLightSpacePos[i]);
				break;
			}
		}
		
		if (vClipSpacePosZ > uCascadeEndClipSpace[NUM_CASCADES - 1]) {
			amountInLight = 1.0;
		}
    
        vec3 viewDir = normalize(uWorldSpaceCameraPos - vWorldPos);
        vec3 halfDir = normalize(uLightingDirection + viewDir);
        
		vec3 albedo = uColor;
        vec3 specTint = albedo * uMetallic;
        float oneMinusReflectivity = 1.0 - uMetallic;
        albedo = albedo * oneMinusReflectivity;
        
        float light = max(dot(normal, uLightingDirection), 0.0);
		vec3 specular = specTint * uDirectionalColor * pow(dot(halfDir, normal), uSmoothness);
       	
       	vec3 diffuse = albedo * uDirectionalColor * light;
       	vec3 col = diffuse + specular;
       	col = col * amountInLight;
        
        fragmentColor = vec4(col + (uAmbientColor * albedo), 1);
    }`;var vertexColorUnlitShaderSource=`
	attribute vec3 aVertexPosition; 
	attribute vec3 aVertexNormal;
	
	uniform mat4 uMVMatrix;
	uniform mat4 uPMatrix;
	
	void main(void) {
	    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
	}`;var fragmentColorUnlitShaderSource=`
	precision mediump float;

	uniform vec3 uColor;

    void main(void) {        
        gl_FragColor = vec4(uColor, 1);
    }`;var lightVertexGLSL=`
	attribute vec3 aVertexPosition;

	uniform mat4 uPMatrix;
	uniform mat4 uMVMatrix;

	void main (void) {
	  gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
	}`;var lightFragmentGLSL=`
	precision mediump float;

	vec4 encodeFloat (float depth) {
	  const vec4 bitShift = vec4(
	    256 * 256 * 256,
	    256 * 256,
	    256,
	    1.0
	  );
	  const vec4 bitMask = vec4(
	    0,
	    1.0 / 256.0,
	    1.0 / 256.0,
	    1.0 / 256.0
	  );
	  vec4 comp = fract(depth * bitShift);
	  comp -= comp.xxyz * bitMask;
	  return comp;
	}

	void main (void) {
	  gl_FragColor = encodeFloat(gl_FragCoord.z);
	}`;var simplePostVertex=`
	attribute vec3 aVertexPosition;
	attribute vec2 aTextureCoord;
	
	uniform mat4 uMVMatrix;
	uniform mat4 uPMatrix;
	
	varying vec2 vTextureCoord;
	
	void main(void) {
		gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
		vTextureCoord = aTextureCoord;
	}
	`;var passthroughPostFragment=`
	precision mediump float;
	varying vec2 vTextureCoord;
	
	uniform sampler2D uSampler;
	
	void main(void) {
		vec3 col = texture2D(uSampler, vTextureCoord).rgb;
		float gamma = 1.0 / 1.1;
		col = pow(col, vec3(gamma, gamma, gamma));
		gl_FragColor = vec4(col, 1.0);
	}
	`;function handleMouseDown(event){inputManager.mouseDown=!0;inputManager.lastMouseX=event.clientX;inputManager.lastMouseY=event.clientY}
function handleMouseUp(event){inputManager.mouseDown=!1}
function handleMouseMove(event){var newX=event.clientX;var newY=event.clientY;inputManager.deltaX=newX-inputManager.lastMouseX;var around=vec3.create();inputManager.deltaY=newY-inputManager.lastMouseY;inputManager.lastMouseX=newX;inputManager.lastMouseY=newY}
function handleKeyDown(event){inputManager.currentlyPressedKeys[event.keyCode]=!0;if(inputManager.currentlyPressedKeys[70]===!0){showFPS=!showFPS}}
function handleKeyUp(event){inputManager.currentlyPressedKeys[event.keyCode]=!1}
function handleKeys(){}
function handleMouseWheel(event){inputManager.deltaWheel=Math.max(-1,Math.min(1,(event.wheelDelta||-event.detail)))}
class InputManager{constructor(){this.currentlyPressedKeys={};this.mouseDown=!1;this.lastMouseX=null;this.lastMouseY=null;this.deltaX=0;this.deltaY=0;this.deltaWheel=0}
clear(){this.deltaX=0;this.deltaY=0;this.deltaWheel=0}}
var inputManager=new InputManager();class Timer{constructor(){this.time=new Date().getTime();this.deltaTimer=0;this.fpsBuffer=[];this.fpsMax=60}
update(){var now=new Date().getTime();this.deltaTime=now-this.time;this.time=now;var fps=1.0/(this.deltaTime/1000.0);this.fpsBuffer.push(fps);if(this.fpsBuffer.length>this.fpsMax){this.fpsBuffer.shift()}
var sum=0;for(var i=0;i<this.fpsBuffer.length;i++){sum+=this.fpsBuffer[i]}
sum/=this.fpsBuffer.length;if(showFPS){document.getElementById("FPS_Counter").textContent="FPS: "+Math.round(sum)}else{document.getElementById("FPS_Counter").textContent=""}}}
var timer=new Timer();class GameObject{constructor(name){this.position=vec3.fromValues(0,0,0);this.rotation=quat.fromValues(0,0,0,1);this.scale=vec3.fromValues(1,1,1);this.name=name;this.positionLast;this.rotationLast;this.scaleLast;this.worldMatrix}
WorldMatrix(){if(this.positionLast!==this.postion||this.rotationLast!==this.rotation||this.scaleLast!==this.scale){this.worldMatrix=mat4.create();mat4.fromRotationTranslationScale(this.worldMatrix,this.rotation,this.position,this.scale);this.positionLast=this.postion;this.rotationLast=this.rotation;this.scaleLast=this.scale}
return this.worldMatrix}}
function fileLoaded(data,model){var vertices=[];var normals=[];var uvs=[];var object=[];var objects={};var materials=[];var currentMaterial=null;var lines=data.split('\n');for(var l=0;l<lines.length;l++){var tokens=lines[l].split(' ');if(tokens[0]==""||tokens[0]=="#"||tokens[0]=="mtllib"||tokens[0]=="g"){continue}
if(tokens[0]=="v"){vertices.push(parseFloat(tokens[1]))
vertices.push(parseFloat(tokens[2]))
vertices.push(0-parseFloat(tokens[3]))}
else if(tokens[0]=="vn"){normals.push(parseFloat(tokens[1]))
normals.push(parseFloat(tokens[2]))
normals.push(0-parseFloat(tokens[3]))}
else if(tokens[0]=="vt"){uvs.push(parseFloat(tokens[1]))
uvs.push(parseFloat(tokens[2]))}
else if(tokens[0]=="usemtl"){currentMaterial=tokens[1];if(!materials.includes(currentMaterial)){materials.push(currentMaterial);objects[currentMaterial]=[]}}
else if(tokens[0]=="f"){objects[currentMaterial].push(tokens[1]);objects[currentMaterial].push(tokens[2]);objects[currentMaterial].push(tokens[3])}}
for(var m=0;m<materials.length;m++){var subMesh=new Mesh();var c=0;for(var f=0;f<objects[materials[m]].length;f++){var tokens=objects[materials[m]][f].split('/');subMesh.vertices.push(vertices[(parseInt(tokens[0])-1)*3]);subMesh.vertices.push(vertices[(parseInt(tokens[0])-1)*3+1]);subMesh.vertices.push(vertices[(parseInt(tokens[0])-1)*3+2]);if(tokens[1]!=""){subMesh.uvs.push(uvs[(parseInt(tokens[1])-1)*2]);subMesh.uvs.push(uvs[(parseInt(tokens[1])-1)*2+1])}else{subMesh.uvs.push(0);subMesh.uvs.push(0)}
if(tokens[2]!=""){subMesh.normals.push(normals[(parseInt(tokens[2])-1)*3]);subMesh.normals.push(normals[(parseInt(tokens[2])-1)*3+1]);subMesh.normals.push(normals[(parseInt(tokens[2])-1)*3+2])}else{subMesh.normals.push(0);subMesh.normals.push(0);subMesh.normals.push(0)}
subMesh.triangles.push(c);c+=1}
model.meshes.push(subMesh)}}
var loadingObjects=0;function OBJLoader(meshFile,mesh){loadingObjects+=1;document.getElementById("loadingtext").textContent="Loading Object(s)...";var request=new XMLHttpRequest();request.open("GET",meshFile);request.onreadystatechange=function(){if(request.readyState==4){fileLoaded(request.responseText,mesh)
loadingObjects-=1;if(loadingObjects==0){document.getElementById("loadingtext").textContent=""}}}
request.send()}
class MeshRenderer{constructor(){this.model;this.materials=[]}
renderShadow(gl,mvMatrix,pLightMatrix){if(typeof this.model=='undefined'||typeof this.materials.length==0){return}
if(!this.model.isInit()){this.model.init(gl)}
for(var i=0;i<this.model.meshes.length;i++){var matIndex=Math.min(i,this.materials.length-1);gl.useProgram(this.materials[matIndex].shaderProgramShadow);gl.uniformMatrix4fv(this.materials[matIndex].shaderProgramShadow.pMatrixUniform,!1,pLightMatrix);gl.uniformMatrix4fv(this.materials[matIndex].shaderProgramShadow.mvMatrixUniform,!1,mvMatrix);gl.bindBuffer(gl.ARRAY_BUFFER,this.model.meshes[i].vertexPositionBuffer);gl.vertexAttribPointer(this.materials[matIndex].shaderProgramShadow.vertexPositionAttribute,this.model.meshes[i].vertexPositionBuffer.itemSize,gl.FLOAT,!1,0,0);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.model.meshes[i].vertexIndexBuffer);gl.drawElements(gl.TRIANGLES,this.model.meshes[i].vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0)}}
render(gl,pMatrix,mMatrix,mvMatrix,camera,lightingDirection,shadowMaps,mvpLights,cascadeEnd){if(typeof this.model=='undefined'||typeof this.materials.length==0){return}
if(!this.model.isInit()){this.model.init(gl)}
for(var i=0;i<this.model.meshes.length;i++){var matIndex=Math.min(i,this.materials.length-1);gl.useProgram(this.materials[matIndex].shaderProgram);gl.bindBuffer(gl.ARRAY_BUFFER,this.model.meshes[i].vertexPositionBuffer);gl.vertexAttribPointer(this.materials[matIndex].shaderProgram.vertexPositionAttribute,this.model.meshes[i].vertexPositionBuffer.itemSize,gl.FLOAT,!1,0,0);if(this.materials[matIndex].shaderProgram.vertexNormalAttribute!=-1){gl.bindBuffer(gl.ARRAY_BUFFER,this.model.meshes[i].vertexNormalBuffer);gl.vertexAttribPointer(this.materials[matIndex].shaderProgram.vertexNormalAttribute,this.model.meshes[i].vertexNormalBuffer.itemSize,gl.FLOAT,!1,0,0)}
if(this.materials[matIndex].shaderProgram.textureCoordAttribute!=-1){gl.bindBuffer(gl.ARRAY_BUFFER,this.model.meshes[i].vertexTextureCoordBuffer);gl.vertexAttribPointer(this.materials[matIndex].shaderProgram.textureCoordAttribute,this.model.meshes[i].vertexTextureCoordBuffer.itemSize,gl.FLOAT,!1,0,0)}
var textureLocation=gl.TEXTURE0;if(this.materials[matIndex].shaderProgram.shadowMaps!=null){gl.activeTexture(textureLocation++);gl.bindTexture(gl.TEXTURE_2D,shadowMaps[0].texture);gl.activeTexture(textureLocation++);gl.bindTexture(gl.TEXTURE_2D,shadowMaps[1].texture);gl.activeTexture(textureLocation++);gl.bindTexture(gl.TEXTURE_2D,shadowMaps[2].texture);gl.uniform1iv(this.materials[matIndex].shaderProgram.shadowMaps,[0,1,2])}
gl.uniform3f(this.materials[matIndex].shaderProgram.ambientColorUniform,0.2,0.2,0.2);var adjustedLD=vec3.create();vec3.normalize(adjustedLD,lightingDirection);vec3.scale(adjustedLD,adjustedLD,-1);gl.uniform3fv(this.materials[matIndex].shaderProgram.lightingDirectionUniform,adjustedLD);gl.uniform3f(this.materials[matIndex].shaderProgram.directionalColorUniform,1,1,0.9);if(this.materials[matIndex].shaderProgram.color!=null){gl.uniform3f(this.materials[matIndex].shaderProgram.color,this.materials[matIndex].color[0],this.materials[matIndex].color[1],this.materials[matIndex].color[2])}
if(this.materials[matIndex].shaderProgram.metallic!=null){gl.uniform1f(this.materials[matIndex].shaderProgram.metallic,this.materials[matIndex].metallic)}
if(this.materials[matIndex].shaderProgram.smoothness!=null){gl.uniform1f(this.materials[matIndex].shaderProgram.smoothness,this.materials[matIndex].smoothness)}
if(this.materials[matIndex].shaderProgram.worldSpaceCameraPos!=null){gl.uniform3f(this.materials[matIndex].shaderProgram.worldSpaceCameraPos,camera.gameObject.position[0],camera.gameObject.position[1],camera.gameObject.position[2])}
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.model.meshes[i].vertexIndexBuffer);gl.uniformMatrix4fv(this.materials[matIndex].shaderProgram.pMatrixUniform,!1,pMatrix);gl.uniformMatrix4fv(this.materials[matIndex].shaderProgram.mvMatrixUniform,!1,mvMatrix);var normalMatrix=mat3.create();mat3.normalFromMat4(normalMatrix,mMatrix);gl.uniformMatrix3fv(this.materials[matIndex].shaderProgram.nMatrixUniform,!1,normalMatrix);gl.uniformMatrix4fv(this.materials[matIndex].shaderProgram.objectToWorld,!1,mMatrix);gl.uniformMatrix4fv(this.materials[matIndex].shaderProgram.lightMVP[0],!1,mvpLights[0]);gl.uniformMatrix4fv(this.materials[matIndex].shaderProgram.lightMVP[1],!1,mvpLights[1]);gl.uniformMatrix4fv(this.materials[matIndex].shaderProgram.lightMVP[2],!1,mvpLights[2]);gl.uniform1f(this.materials[matIndex].shaderProgram.cascadeEndClipSpace[0],cascadeEnd[0]);gl.uniform1f(this.materials[matIndex].shaderProgram.cascadeEndClipSpace[1],cascadeEnd[1]);gl.uniform1f(this.materials[matIndex].shaderProgram.cascadeEndClipSpace[2],cascadeEnd[2]);gl.drawElements(gl.TRIANGLES,this.model.meshes[i].vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0)}}
init(gl){model.init(gl);for(var i=0;i<materials.length;i++){material.init(gl)}}}
function clamp(num,min,max){return Math.min(Math.max(num,min),max)};class Camera{constructor(){this.fov=45;this.near=0.1;this.far=1000;this.target;this.distance=10;this.xSpeed=1;this.ySpeed=10;this.yMinLimit=-20;this.yMaxLimit=80;this.distanceMin=6;this.distanceMax=35;this.x=0;this.y=0}
perspective(aspect,matrix){mat4.perspective(matrix,toRadians(this.fov),aspect,this.near,this.far)}
skyboxPerspective(aspect,matrix){mat4.perspective(matrix,toRadians(this.fov),aspect,10000,1000000)}
viewMatrix(){var view=this.gameObject.WorldMatrix();return mat4.invert(view,view)}
update(){if(typeof this.target=='undefined'){return}
this.distance=clamp(this.distance-inputManager.deltaWheel*0.5,this.distanceMin,this.distanceMax);if(inputManager.mouseDown)
{this.x-=inputManager.deltaX*this.xSpeed*this.distance*0.01;this.y-=inputManager.deltaY*this.ySpeed*0.02}
var rotation=quat.create();quat.fromEuler(rotation,this.y,this.x,0);var position=vec3.create();vec3.transformQuat(position,vec3.fromValues(0,0,this.distance),rotation);vec3.add(position,position,this.target.position);this.gameObject.rotation=rotation;this.gameObject.position=position}}
class Model{constructor(){this.meshes=[]}
load(file){OBJLoader(file,this)}
init(gl){for(var i=0;i<this.meshes.length;i++){this.meshes[i].init(gl)}}
isInit(){for(var i=0;i<this.meshes.length;i++){if(!this.meshes[i].is_init){return!1}}
return!0}}
class Mesh{constructor(){this.is_init=!1;this.vertexPositionBuffer;this.vertexNormalBuffer;this.vertexTextureCoordBuffer;this.vertexIndexBuffer;this.vertices=[];this.normals=[];this.uvs=[];this.triangles=[]}
init(gl){if(this.is_init){return}
this.vertexPositionBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexPositionBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(this.vertices),gl.STATIC_DRAW);this.vertexPositionBuffer.itemSize=3;this.vertexPositionBuffer.numItems=this.vertices.length/3;this.vertexNormalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexNormalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(this.normals),gl.STATIC_DRAW);this.vertexNormalBuffer.itemSize=3;this.vertexNormalBuffer.numItems=this.normals.length/3;this.vertexTextureCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexTextureCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(this.uvs),gl.STATIC_DRAW);this.vertexTextureCoordBuffer.itemSize=2;this.vertexTextureCoordBuffer.numItems=this.uvs.length/2;this.vertexIndexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(this.triangles),gl.STATIC_DRAW);this.vertexIndexBuffer.itemSize=1;this.vertexIndexBuffer.numItems=this.triangles.length;this.is_init=!0}
screen(){this.vertices=[0,0,-1,0,1,-1,1,1,-1,1,0,-1];this.uvs=[0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0];this.triangles=[0,1,2,0,2,3,]}
cube(){this.vertices=[-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,];this.normals=[0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0];this.uvs=[0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,];this.triangles=[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}}
function handleLoadedTexture(gl,texture){gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,!0);gl.bindTexture(gl.TEXTURE_2D,texture);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,texture.image);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_NEAREST);gl.generateMipmap(gl.TEXTURE_2D);gl.bindTexture(gl.TEXTURE_2D,null)}
class Texture{constructor(){this.is_init=!1;this.texture}
init(gl,file){if(this.is_init){return}
this.texture=gl.createTexture();this.texture.image=new Image();var temp=this.texture;this.texture.image.onload=function(){handleLoadedTexture(gl,temp)}
this.texture.image.src=file;this.is_init=!0}}
class RenderTexture{constructor(gl,width,height){this.textureWidth=width*2;this.textureHeight=height*2;this.texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,this.texture);{const level=0;const internalFormat=gl.RGBA;const border=0;const format=gl.RGBA;const type=gl.UNSIGNED_BYTE;const data=null;gl.texImage2D(gl.TEXTURE_2D,level,internalFormat,this.textureWidth,this.textureHeight,border,format,type,data);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE)}
this.fb=gl.createFramebuffer();gl.bindFramebuffer(gl.FRAMEBUFFER,this.fb);const attachmentPoint=gl.COLOR_ATTACHMENT0;gl.framebufferTexture2D(gl.FRAMEBUFFER,attachmentPoint,gl.TEXTURE_2D,this.texture,0);const depthBuffer=gl.createRenderbuffer();gl.bindRenderbuffer(gl.RENDERBUFFER,depthBuffer);gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,this.textureWidth,this.textureHeight);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,depthBuffer)}}
class DepthTexture{constructor(gl,width,height){this.textureWidth=width;this.textureHeight=height;this.texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,this.texture);{const level=0;const internalFormat=gl.RGBA;const border=0;const format=gl.RGBA;const type=gl.UNSIGNED_BYTE;const data=null;gl.texImage2D(gl.TEXTURE_2D,level,internalFormat,this.textureWidth,this.textureHeight,border,format,type,data);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE)}
this.fb=gl.createFramebuffer();gl.bindFramebuffer(gl.FRAMEBUFFER,this.fb);this.renderBuffer=gl.createRenderbuffer()
gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer)
gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height)
gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0)
gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer)
gl.bindTexture(gl.TEXTURE_2D,null)
gl.bindRenderbuffer(gl.RENDERBUFFER,null)}}
function getShader(source,id){var shader;if(id=="x-shader/x-fragment"){shader=gl.createShader(gl.FRAGMENT_SHADER)}else if(id=="x-shader/x-vertex"){shader=gl.createShader(gl.VERTEX_SHADER)}else{return null}
gl.shaderSource(shader,source);gl.compileShader(shader);if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)){alert(gl.getShaderInfoLog(shader));return null}
return shader}
class StandardMaterial{constructor(){this.is_init=!1;this.shaderProgram}
initShadow(gl){var fragmentShader=getShader(lightFragmentGLSL,"x-shader/x-fragment");var vertexShader=getShader(lightVertexGLSL,"x-shader/x-vertex");this.shaderProgramShadow=gl.createProgram();gl.attachShader(this.shaderProgramShadow,vertexShader);gl.attachShader(this.shaderProgramShadow,fragmentShader);gl.linkProgram(this.shaderProgramShadow);gl.useProgram(this.shaderProgramShadow);this.shaderProgramShadow.vertexPositionAttribute=gl.getAttribLocation(this.shaderProgramShadow,"aVertexPosition");gl.enableVertexAttribArray(this.shaderProgramShadow.vertexPositionAttribute);this.shaderProgramShadow.pMatrixUniform=gl.getUniformLocation(this.shaderProgramShadow,"uPMatrix");this.shaderProgramShadow.mvMatrixUniform=gl.getUniformLocation(this.shaderProgramShadow,"uMVMatrix")}
init(gl,fSource,vSource){if(this.is_init){return}
var fragmentShader=getShader(fSource,"x-shader/x-fragment");var vertexShader=getShader(vSource,"x-shader/x-vertex");this.shaderProgram=gl.createProgram();gl.attachShader(this.shaderProgram,vertexShader);gl.attachShader(this.shaderProgram,fragmentShader);gl.linkProgram(this.shaderProgram);if(!gl.getProgramParameter(this.shaderProgram,gl.LINK_STATUS)){alert("Could not initialise shaders");return}
gl.useProgram(this.shaderProgram);this.shaderProgram.vertexPositionAttribute=gl.getAttribLocation(this.shaderProgram,"aVertexPosition");gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);this.shaderProgram.vertexNormalAttribute=gl.getAttribLocation(this.shaderProgram,"aVertexNormal");if(this.shaderProgram.vertexNormalAttribute!=-1){gl.enableVertexAttribArray(this.shaderProgram.vertexNormalAttribute)}
this.shaderProgram.textureCoordAttribute=gl.getAttribLocation(this.shaderProgram,"aTextureCoord");if(this.shaderProgram.textureCoordAttribute!=-1){gl.enableVertexAttribArray(this.shaderProgram.textureCoordAttribute)}
this.shaderProgram.color=gl.getUniformLocation(this.shaderProgram,"uColor");this.shaderProgram.metallic=gl.getUniformLocation(this.shaderProgram,"uMetallic");this.shaderProgram.smoothness=gl.getUniformLocation(this.shaderProgram,"uSmoothness");this.shaderProgram.pMatrixUniform=gl.getUniformLocation(this.shaderProgram,"uPMatrix");this.shaderProgram.mvMatrixUniform=gl.getUniformLocation(this.shaderProgram,"uMVMatrix");this.shaderProgram.nMatrixUniform=gl.getUniformLocation(this.shaderProgram,"uNMatrix");this.shaderProgram.objectToWorld=gl.getUniformLocation(this.shaderProgram,"uObjectToWorld");this.shaderProgram.worldSpaceCameraPos=gl.getUniformLocation(this.shaderProgram,"uWorldSpaceCameraPos");this.shaderProgram.shadowMaps=gl.getUniformLocation(this.shaderProgram,"uShadowMap");this.shaderProgram.mainTexture=gl.getUniformLocation(this.shaderProgram,"uTexture");this.shaderProgram.cascadeEndClipSpace=[3];this.shaderProgram.cascadeEndClipSpace[0]=gl.getUniformLocation(this.shaderProgram,"uCascadeEndClipSpace[0]");this.shaderProgram.cascadeEndClipSpace[1]=gl.getUniformLocation(this.shaderProgram,"uCascadeEndClipSpace[1]");this.shaderProgram.cascadeEndClipSpace[2]=gl.getUniformLocation(this.shaderProgram,"uCascadeEndClipSpace[2]");this.shaderProgram.ambientColorUniform=gl.getUniformLocation(this.shaderProgram,"uAmbientColor");this.shaderProgram.lightingDirectionUniform=gl.getUniformLocation(this.shaderProgram,"uLightingDirection");this.shaderProgram.directionalColorUniform=gl.getUniformLocation(this.shaderProgram,"uDirectionalColor");this.shaderProgram.lightMVP=[3];this.shaderProgram.lightMVP[0]=gl.getUniformLocation(this.shaderProgram,"uMVPlight[0]");this.shaderProgram.lightMVP[1]=gl.getUniformLocation(this.shaderProgram,"uMVPlight[1]");this.shaderProgram.lightMVP[2]=gl.getUniformLocation(this.shaderProgram,"uMVPlight[2]");this.initShadow(gl);this.is_init=!0}}
var skyboxVertexSoruce=`#version 300 es
in vec3 aVertexPosition;
in vec2 aTextureCoord;

uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;
uniform mat4 uObjectToWorld;

out vec2 vTextureCoord;
out vec3 vWorldPos;

void main(void) {
	gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
    vWorldPos = (uObjectToWorld * vec4(aVertexPosition, 1.0)).xyz;
    vTextureCoord = aTextureCoord * 10.0;
}


`;var skyboxFragmentSource=`#version 300 es
precision mediump float;

out vec4 fragmentColor;

uniform vec3 uWorldSpaceCameraPos;
uniform sampler2D uTexture;

uniform vec3 uLightingDirection;
uniform vec3 uDirectionalColor;

in vec2 vTextureCoord;
in vec3 vWorldPos;

float remap(float value, float low1, float high1, float low2, float high2) {
	return (value - low1) * (high2 - low2) / (high1 - low1) + low2;
}

void main(void) {
	vec3 viewDirection = normalize(uWorldSpaceCameraPos - vWorldPos);
	vec3 lightDirection = normalize(uLightingDirection);
	vec3 lightColor = uDirectionalColor;
	
	vec3 stars = texture(uTexture, vTextureCoord).rgb;
	
	float gamma = 2.2;
	stars = pow(stars, vec3(2.2, 2.2, 2.2));
	
	vec3 ray = -viewDirection;
	
	vec3 delta = lightDirection - ray;
	float dist = length(delta);
	float spot = 1.0 - smoothstep(0.0, 0.25, dist);
	float ss = spot * spot;
	vec3 sun = ss * lightColor;
	
	vec3 col = stars + sun;
	
	fragmentColor = vec4(col.rgb, 1.0);
	//fragmentColor.rgb = viewDirection; 
}
`;class Skybox{constructor(){this.material=new StandardMaterial();this.model=new Model();this.model.load("Assets/Models/Skybox.obj");var texture=new Texture();texture.init(gl,"Assets/Textures/Stars.jpg");this.material.mainTexture=texture}
init(gl){this.model.init(gl);this.material.init(gl,skyboxFragmentSource,skyboxVertexSoruce)}}
class Scene{constructor(){this.gameObjects=[];var cameraObj=new GameObject();cameraObj.camera=new Camera();cameraObj.camera.gameObject=cameraObj;this.camera=cameraObj.camera;this.skybox=new Skybox()}
AddGameObject(obj){this.gameObjects.push(obj)}}
var gl;var scene;var showFPS=!1;var mainRenderTarget;var shadowMaps=[];var screenQuad;var sandstoneTexture;function initGL(canvas){try{gl=canvas.getContext("webgl2");gl.viewportWidth=canvas.width=window.innerWidth;gl.viewportHeight=canvas.height=window.innerHeight}catch(e){}
if(!gl){alert("Could not initialise WebGL!")}}
function setMatrixUniforms(pMatrix,mMatrix,mvMatrix,shaderProgram){gl.uniformMatrix4fv(shaderProgram.pMatrixUniform,!1,pMatrix);gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform,!1,mvMatrix);var normalMatrix=mat3.create();mat3.normalFromMat4(normalMatrix,mMatrix);gl.uniformMatrix3fv(shaderProgram.nMatrixUniform,!1,normalMatrix)}
cascadeEnd=[4];function toRadians(deg){return deg*Math.PI/180}
function mix(x,y,a){return x*(1.0-a)+y*(a)}
class Box{constructor(){this.bottomLeft;this.topRight}}
function computeBox(viewProjection,lightView)
{var t=mat4.create();mat4.invert(t,viewProjection);mat4.multiply(t,lightView,t);var v=[vec4.fromValues(-1,1,-1,1),vec4.fromValues(1,1,-1,1),vec4.fromValues(1,-1,-1,1),vec4.fromValues(-1,-1,-1,1),vec4.fromValues(-1,1,1,1),vec4.fromValues(1,1,1,1),vec4.fromValues(1,-1,1,1),vec4.fromValues(1,-1,1,1)];vec4.transformMat4(v[0],v[0],t);vec4.transformMat4(v[1],v[1],t);vec4.transformMat4(v[2],v[2],t);vec4.transformMat4(v[3],v[3],t);vec4.transformMat4(v[4],v[4],t);vec4.transformMat4(v[5],v[5],t);vec4.transformMat4(v[6],v[6],t);vec4.transformMat4(v[7],v[7],t);for(var i=0;i<8;i++){vec4.scale(v[i],v[i],1.0/v[i][3])}
var out=new Box();out.bottomLeft=vec3.fromValues(1000000,1000000,1000000);out.topRight=vec3.fromValues(-1000000,-1000000,-1000000);for(var i=0;i<8;i++){out.bottomLeft[0]=Math.min(v[i][0],out.bottomLeft[0]);out.topRight[0]=Math.max(v[i][0],out.topRight[0]);out.bottomLeft[1]=Math.min(v[i][1],out.bottomLeft[1]);out.topRight[1]=Math.max(v[i][1],out.topRight[1]);out.bottomLeft[2]=Math.min(v[i][2],out.bottomLeft[2]);out.topRight[2]=Math.max(v[i][2],out.topRight[2])}
return out}
function computeShadowProjection(view,projection,lightView){var zNear=scene.camera.near;var zFar=150;var fov=toRadians(scene.camera.fov);var ratio=mainRenderTarget.textureWidth/mainRenderTarget.textureHeight;var splitFar=[zFar,zFar,zFar,zFar];var splitNear=[zNear,zNear,zNear,zNear];var lambda=0.5;var j=1;for(var i=0;i<2;i++,j+=1)
{splitFar[i]=mix(zNear+(j/3)*(zFar-zNear),zNear+Math.pow(zFar/zNear,j/3),lambda);splitNear[i+1]=splitFar[i]}
for(var i=0;i<3;i++){var cameraViewProjection=mat4.create();mat4.perspective(cameraViewProjection,fov,ratio,zNear,splitFar[i])
mat4.multiply(cameraViewProjection,cameraViewProjection,view);var box=computeBox(cameraViewProjection,lightView);mat4.ortho(shadowMaps[i].pMatrix,box.bottomLeft[0]*2,box.topRight[0]*2,box.bottomLeft[1]*2,box.topRight[1]*2,-box.topRight[2]*2,-box.bottomLeft[2]*2)}
zNear=splitFar[i];for(i=3;i<4;i++){splitFar[i]=1000000;splitNear[i]=-1000000}
cascadeEnd=splitFar}
function drawScene(){var lightingDirection=vec3.create();var lightRotation=quat.create();quat.fromEuler(lightRotation,22,44,180);vec3.transformQuat(lightingDirection,vec3.fromValues(0,0,-1),lightRotation);var pMatrix=mat4.create();scene.camera.perspective(mainRenderTarget.textureWidth/mainRenderTarget.textureHeight,pMatrix);var viewMatrix=scene.camera.viewMatrix();var lightViewMatrix=mat4.create();mat4.fromRotationTranslation(lightViewMatrix,lightRotation,scene.camera.gameObject.position);mat4.invert(lightViewMatrix,lightViewMatrix);computeShadowProjection(viewMatrix,pMatrix,lightViewMatrix);gl.disable(gl.CULL_FACE);for(var s=0;s<3;s++)
{gl.bindFramebuffer(gl.FRAMEBUFFER,shadowMaps[s].fb);gl.viewport(0,0,shadowMaps[s].textureWidth,shadowMaps[s].textureHeight);gl.clearColor(0,0,0,1.0);gl.clearDepth(1.0)
gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);for(var i=0;i<scene.gameObjects.length;i++)
{var renderer=scene.gameObjects[i].meshRenderer;if(typeof renderer=='undefined'){continue}
var mvLightMatrix=mat4.create();mat4.multiply(mvLightMatrix,lightViewMatrix,scene.gameObjects[i].WorldMatrix())
renderer.renderShadow(gl,mvLightMatrix,shadowMaps[s].pMatrix)}}
gl.enable(gl.CULL_FACE);gl.cullFace(gl.FRONT);{gl.bindFramebuffer(gl.FRAMEBUFFER,mainRenderTarget.fb);gl.viewport(0,0,mainRenderTarget.textureWidth,mainRenderTarget.textureHeight);gl.clearColor(0.1,0.1,0.1,1.0);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);gl.depthMask(!1);if(scene.skybox.model.meshes.length>0)
{var program=scene.skybox.material.shaderProgram;var mesh=scene.skybox.model.meshes[0];mesh.init(gl);gl.useProgram(program);gl.bindBuffer(gl.ARRAY_BUFFER,mesh.vertexPositionBuffer);gl.vertexAttribPointer(program.vertexPositionAttribute,mesh.vertexPositionBuffer.itemSize,gl.FLOAT,!1,0,0);gl.bindBuffer(gl.ARRAY_BUFFER,mesh.vertexTextureCoordBuffer);gl.vertexAttribPointer(program.textureCoordAttribute,mesh.vertexTextureCoordBuffer.itemSize,gl.FLOAT,!1,0,0);gl.activeTexture(gl.TEXTURE0);gl.bindTexture(gl.TEXTURE_2D,scene.skybox.material.mainTexture.texture);gl.uniform1i(program.mainTexture,0);gl.uniform3f(program.worldSpaceCameraPos,scene.camera.gameObject.position[0],scene.camera.gameObject.position[1],scene.camera.gameObject.position[2]);var adjustedLD=vec3.create();vec3.normalize(adjustedLD,lightingDirection);vec3.scale(adjustedLD,adjustedLD,-1);gl.uniform3fv(program.lightingDirectionUniform,adjustedLD);gl.uniform3f(program.directionalColorUniform,1,1,0.9);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,mesh.vertexIndexBuffer);var worldMatrix=mat4.create();mat4.fromRotationTranslationScale(worldMatrix,quat.create(),scene.camera.gameObject.position,vec3.fromValues(80000,80000,80000));var mvMatrix=mat4.create();mat4.multiply(mvMatrix,viewMatrix,worldMatrix);var pSkyMatrix=mat4.create();scene.camera.skyboxPerspective(mainRenderTarget.textureWidth/mainRenderTarget.textureHeight,pSkyMatrix);gl.uniformMatrix4fv(program.pMatrixUniform,!1,pSkyMatrix);gl.uniformMatrix4fv(program.objectToWorld,!1,worldMatrix);gl.uniformMatrix4fv(program.mvMatrixUniform,!1,mvMatrix);gl.drawElements(gl.TRIANGLES,mesh.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0)}
gl.depthMask(!0);for(var i=0;i<scene.gameObjects.length;i++)
{var renderer=scene.gameObjects[i].meshRenderer;if(typeof renderer=='undefined'){continue}
var worldMatrix=scene.gameObjects[i].WorldMatrix();var mvMatrix=mat4.create();mat4.multiply(mvMatrix,viewMatrix,worldMatrix);var mvLightMatrix=mat4.create();mat4.multiply(mvLightMatrix,lightViewMatrix,scene.gameObjects[i].WorldMatrix())
var mvpLights=[3];for(var p=0;p<3;p++){mvpLights[p]=mat4.create();mat4.multiply(mvpLights[p],shadowMaps[p].pMatrix,mvLightMatrix)}
renderer.render(gl,pMatrix,worldMatrix,mvMatrix,scene.camera,lightingDirection,shadowMaps,mvpLights,cascadeEnd)}}
gl.depthMask(!1);{gl.bindFramebuffer(gl.FRAMEBUFFER,null);gl.viewport(0,0,gl.viewportWidth,gl.viewportHeight);gl.clearColor(0.5,0.5,0.5,1.0);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);var pMatrix=mat4.create();mat4.ortho(pMatrix,0,1,0,1,0,100);var viewMatrix=mat4.create();var worldMatrix=mat4.create();var mvMatrix=mat4.create();mat4.multiply(mvMatrix,viewMatrix,worldMatrix);gl.useProgram(screenMat.shaderProgram);gl.bindBuffer(gl.ARRAY_BUFFER,screenQuad.vertexPositionBuffer);gl.vertexAttribPointer(screenMat.shaderProgram.vertexPositionAttribute,screenQuad.vertexPositionBuffer.itemSize,gl.FLOAT,!1,0,0);gl.bindBuffer(gl.ARRAY_BUFFER,screenQuad.vertexTextureCoordBuffer);gl.vertexAttribPointer(screenMat.shaderProgram.textureCoordAttribute,screenQuad.vertexTextureCoordBuffer.itemSize,gl.FLOAT,!1,0,0);gl.activeTexture(gl.TEXTURE0);gl.bindTexture(gl.TEXTURE_2D,mainRenderTarget.texture);gl.uniform1i(screenMat.shaderProgram.samplerUniform,0);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,screenQuad.vertexIndexBuffer);gl.uniformMatrix4fv(screenMat.shaderProgram.pMatrixUniform,!1,pMatrix);gl.uniformMatrix4fv(screenMat.shaderProgram.mvMatrixUniform,!1,mvMatrix);gl.drawElements(gl.TRIANGLES,screenQuad.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0)}
gl.depthMask(!0)}
function tick(){requestAnimFrame(tick);timer.update();handleKeys();scene.camera.update();drawScene();inputManager.clear()}
function resizeCanvas(){var canvas=document.getElementById("Game-canvas");gl.viewportWidth=canvas.width=window.innerWidth;gl.viewportHeight=canvas.height=window.innerHeight;mainRenderTarget=new RenderTexture(gl,gl.viewportWidth,gl.viewportHeight)}
function loadShip(){var LightColor=new StandardMaterial();LightColor.init(gl,fragmentColorShaderSource,vertexColorShaderSource);LightColor.color=[0.62,0.63,0.55];LightColor.metallic=0.7;LightColor.smoothness=10.0;var DarkColor=new StandardMaterial();DarkColor.init(gl,fragmentColorShaderSource,vertexColorShaderSource);DarkColor.color=[0.24,0.26,0.23];DarkColor.metallic=0.7;DarkColor.smoothness=10.0;var HullLights=new StandardMaterial();HullLights.init(gl,fragmentColorShaderSource,vertexColorShaderSource);HullLights.color=[0.72,0.73,0.65];HullLights.metallic=0.7;HullLights.smoothness=10.0;var EngineExhast=new StandardMaterial();EngineExhast.init(gl,fragmentColorUnlitShaderSource,vertexColorUnlitShaderSource);EngineExhast.color=[0.58,0.8,0.97];var GoldBall=new StandardMaterial();GoldBall.init(gl,fragmentColorShaderSource,vertexColorShaderSource);GoldBall.color=[1,0.84,0];GoldBall.metallic=0.5;GoldBall.smoothness=5.0;var RingLight=new StandardMaterial();RingLight.init(gl,fragmentColorUnlitShaderSource,vertexColorUnlitShaderSource);RingLight.color=[01,1,1];var Missing=new StandardMaterial();Missing.init(gl,fragmentColorShaderSource,vertexColorShaderSource);Missing.color=[1,0,1];var obj=new GameObject();var renderer=new MeshRenderer();var shipMesh=new Model();shipMesh.load('Assets/Models/SpaceShip01.obj');shipMesh.init(gl);renderer.model=shipMesh;renderer.materials.push(DarkColor);renderer.materials.push(LightColor);renderer.materials.push(HullLights);renderer.materials.push(EngineExhast);renderer.materials.push(GoldBall);renderer.materials.push(RingLight);renderer.materials.push(Missing);obj.meshRenderer=renderer;scene.AddGameObject(obj);scene.camera.gameObject.position=vec3.fromValues(0,0,3)
scene.camera.target=obj}
function newAstroid(model,material){var obj=new GameObject();var renderer=new MeshRenderer();renderer.model=model;renderer.materials.push(material);obj.position=vec3.fromValues(Math.random()*2000-1000,Math.random()*200-100,Math.random()*200-100);var scale=Math.random()*9+1;obj.scale=vec3.fromValues(scale,scale,scale);quat.fromEuler(obj.rotation,Math.random()*360,Math.random()*360,Math.random()*360);obj.meshRenderer=renderer;scene.AddGameObject(obj)}
function webGLStart(){var canvas=document.getElementById("Game-canvas");initGL(canvas);scene=new Scene();scene.skybox.init(gl);screenQuad=new Mesh();screenQuad.screen();screenQuad.init(gl);screenMat=new StandardMaterial();screenMat.init(gl,passthroughPostFragment,simplePostVertex);mainRenderTarget=new RenderTexture(gl,gl.viewportWidth,gl.viewportHeight);shadowMaps.push(new DepthTexture(gl,2048,2048));shadowMaps[0].pMatrix=mat4.create();shadowMaps.push(new DepthTexture(gl,2048,2048));shadowMaps[1].pMatrix=mat4.create();shadowMaps.push(new DepthTexture(gl,2048,2048));shadowMaps[2].pMatrix=mat4.create();cascadeEnd=[4];{var model=new Model();model.load("Assets/Models/Astroid.obj");model.init(gl);var material=new StandardMaterial();material.color=[0.53,0.46,0.33];material.metallic=0.3;material.smoothness=1.0;material.init(gl,fragmentColorShaderSource,vertexColorShaderSource);for(var i=0;i<100;i++){newAstroid(model,material)}}
var model=new Model();model.load("Assets/Models/Astroid.obj");model.init(gl);var obj=new GameObject();var renderer=new MeshRenderer();renderer.model=model;renderer.materials.push(new StandardMaterial());renderer.materials[0].color=[0.53,0.46,0.33];renderer.materials[0].metallic=0.3;renderer.materials[0].smoothness=1.0;renderer.materials[0].init(gl,fragmentColorShaderSource,vertexColorShaderSource);obj.position=vec3.fromValues(0,0,-7.5);obj.scale=vec3.fromValues(5,5,5);obj.meshRenderer=renderer;scene.AddGameObject(obj);loadShip();gl.clearColor(0.5,0.5,0.5,1.0);gl.enable(gl.DEPTH_TEST);document.onkeydown=handleKeyDown;document.onkeyup=handleKeyUp;canvas.onmousedown=handleMouseDown;document.onmouseup=handleMouseUp;document.onmousemove=handleMouseMove;window.addEventListener('mousewheel',handleMouseWheel,!1);window.addEventListener("DOMMouseScroll",handleMouseWheel,!1);window.addEventListener('resize',resizeCanvas,!1);tick()}